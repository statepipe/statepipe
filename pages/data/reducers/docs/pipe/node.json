{
  "description": [
    "Run reducer over the node element."
  ],
  "reducers": [
    {
      "name": "nodePick",
      "description": [
        "Run [pick](#pick) over node element."
      ],
      "schemas": [
        "`nodePick()` state = merge(state, pick([value], node))",
        "`nodePick(a,b)` state = merge(state, pick([a,b], node)"
      ]
    },
    {
      "name": "fnRun",
      "description": [
        "Call functions on different target.",
        "The access to **event** works only for trigger!"
      ],
      "schemas": [
        "`fnRun(self,ping)` node.ping(); return state",
        "`fnRun(event,ping)` event.ping(); return state",
        "`fnRun(ctx,ping)` ctx.ping(); return state",
        "// ctx is the component wrapper",
        "`fnRun(doc,ping)` document.ping(); return state",
        "`fnRun(docElm,ping)` document.documentElement.ping(); return state",
        "`fnRun(body,ping)` document.body.ping(); return state",
        "`fnRun(win,ping)` window.ping(); return state",
        "`fnRun(history,ping)` history.ping(); return state"
      ]
    },
    {
      "name":"nodeProp",
      "description": [
        "Set a value as property. (node.prop = value)",
        "First argument (node prop name) is **required**"
      ],
      "schemas": [
        "`nodeProp()` node.value = state.value",
        "`nodeProp(value,a)` node.value = state.a",
        "`nodeProp(value,a.inner)` node.value = state.a.inner"
      ]
    }
  ]
}
